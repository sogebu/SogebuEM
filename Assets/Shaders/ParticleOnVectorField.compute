#pragma kernel VectorFieldMain
#pragma kernel ParticleMain

#define NUM_THREAD_X 1000
#define NUM_THREAD_Y 1
#define NUM_THREAD_Z 1
#define PI 3.14159265
#define TWO_PI PI*2
#include "UnityCG.cginc"
#include "Noise.cginc"
#include "NoiseMath.cginc"

struct VectorField {
    float3 position;
    float3 direction;
    float dirScalar;
    float4x4 ftensor;
    float4 latticeposition;
};

struct Particle {
    float3 velocity;
    float3 position;
    float4 color;
    float scale;
    float4 ParticlePositionWorld4;
    float4 ParticleVelocityWorld4;
};

RWStructuredBuffer<VectorField> _EVectorFieldDataBuffer;
RWStructuredBuffer<VectorField> _BVectorFieldDataBuffer;
RWStructuredBuffer<Particle> _ParticleDataBuffer;

float _DeltaTime;
float _FrameCount;

float4x4 Lplayer;
float4x4 Linv;
float4x4 R;
float4 playrposworldframe4;
float4 playrvelworldframe4;

//A has upper index: (0,1,2,3) is (x,y,z,w), where w is t.
float4 A(float x, float y, float z, float t)
{
    float r = length(float3(x, y, z));
    return float4(0, 0, 0, 10.0 / r);
}

float4x4 dA(float4 p)
{
    float4x4 D;
    D[0][0] = (A(p.x + 1e-6, p.y, p.z, p.w).x - A(p.x - 1e-6, p.y, p.z, p.w).x) / (2e-6);
    D[0][1] = (A(p.x, p.y + 1e-6, p.z, p.w).x - A(p.x, p.y - 1e-6, p.z, p.w).x) / (2e-6);
    D[0][2] = (A(p.x, p.y, p.z + 1e-6, p.w).x - A(p.x, p.y, p.z - 1e-6, p.w).x) / (2e-6);
    D[0][3] = (A(p.x, p.y, p.z, p.w + 1e-6).x - A(p.x, p.y, p.z, p.w - 1e-6).x) / (2e-6);

    D[1][0] = (A(p.x + 1e-6, p.y, p.z, p.w).y - A(p.x - 1e-6, p.y, p.z, p.w).y) / (2e-6);
    D[1][1] = (A(p.x, p.y + 1e-6, p.z, p.w).y - A(p.x, p.y - 1e-6, p.z, p.w).y) / (2e-6);
    D[1][2] = (A(p.x, p.y, p.z + 1e-6, p.w).y - A(p.x, p.y, p.z - 1e-6, p.w).y) / (2e-6);
    D[1][3] = (A(p.x, p.y, p.z, p.w + 1e-6).y - A(p.x, p.y, p.z, p.w - 1e-6).y) / (2e-6);

    D[2][0] = (A(p.x + 1e-6, p.y, p.z, p.w).z - A(p.x - 1e-6, p.y, p.z, p.w).z) / (2e-6);
    D[2][1] = (A(p.x, p.y + 1e-6, p.z, p.w).z - A(p.x, p.y - 1e-6, p.z, p.w).z) / (2e-6);
    D[2][2] = (A(p.x, p.y, p.z + 1e-6, p.w).z - A(p.x, p.y, p.z - 1e-6, p.w).z) / (2e-6);
    D[2][3] = (A(p.x, p.y, p.z, p.w + 1e-6).z - A(p.x, p.y, p.z, p.w - 1e-6).z) / (2e-6);

    D[3][0] = (A(p.x + 1e-6, p.y, p.z, p.w).w - A(p.x - 1e-6, p.y, p.z, p.w).w) / (2e-6);
    D[3][1] = (A(p.x, p.y + 1e-6, p.z, p.w).w - A(p.x, p.y - 1e-6, p.z, p.w).w) / (2e-6);
    D[3][2] = (A(p.x, p.y, p.z + 1e-6, p.w).w - A(p.x, p.y, p.z - 1e-6, p.w).w) / (2e-6);
    D[3][3] = (A(p.x, p.y, p.z, p.w + 1e-6).w - A(p.x, p.y, p.z, p.w - 1e-6).w) / (2e-6);

    return D;
}    
//Electromagnetic Tensor has only upper indices: (0,1,2,3) is (x,y,z,w), where w is t.
float4x4 GaugeField(float4 x)
{
   float4x4 K;

   K[0][0] = 0;
   K[0][3] = dA(x)[0][3] + dA(x)[3][0];
   K[1][3] = dA(x)[1][3] + dA(x)[3][1];
   K[2][3] = dA(x)[2][3] + dA(x)[3][2];

   K[1][0] = dA(x)[1][0] + dA(x)[0][1];
   K[1][1] = 0;
   K[0][1] = dA(x)[0][1] - dA(x)[1][0];
   K[0][2] = dA(x)[0][2] - dA(x)[2][0];
   K[2][0] = dA(x)[2][0] - dA(x)[0][2];
   K[1][2] = dA(x)[1][2] - dA(x)[2][1];
   K[2][2] = 0;
   K[2][1] = dA(x)[2][1] - dA(x)[1][2];

   K[3][0] = -dA(x)[3][0] - dA(x)[0][3];
   K[3][1] = -dA(x)[3][1] - dA(x)[1][3];
   K[3][2] = -dA(x)[3][2] - dA(x)[2][3];
   K[3][3] = 0;

   return K;
}    
float lip(float4 v1, float4 v2)
{
   return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z - v1.w * v2.w;
}        

float lSqN(float4 v)
{
   return v.x * v.x + v.y * v.y + v.z * v.z - v.w * v.w;
}             

float dtau(float4 Xp, float4 Xn, float4 Vp, float4 Vn)
{
   float cp = lip(Vp, Vp) * _DeltaTime * _DeltaTime + 2 * lip(Vp, Xp - Xn) * _DeltaTime;
   float dtau = lip(Vn, Xn - Xp - Vp * _DeltaTime) - sqrt(lip(Vn, Xn - Xp - Vp * _DeltaTime) * lip(Vn, Xn - Xp - Vp * _DeltaTime) - cp * lip(Vn, Vn));
   return dtau;          
}

[numthreads(NUM_THREAD_X, 1, 1)]
void VectorFieldMain (
    uint3 id : SV_DispatchThreadID,
    uint3 groupID: SV_GroupID,
    uint3 groupThreadID: SV_GroupThreadID,
    uint groupIndex: SV_GROUPINDEX
    )
{
    uint bufferIndex = id.x;
    VectorField Evf = _EVectorFieldDataBuffer[bufferIndex];
    VectorField Bvf = _BVectorFieldDataBuffer[bufferIndex];
    
    //float3 noiseSeed = Evf.position * 0.05;
    //float fc = _FrameCount * 0.04;
    //Evf.direction = Pnoise(noiseSeed * fc);
    float4x4 F = mul(mul(Lplayer, Evf.ftensor), Lplayer);
    float4 lpos = Evf.latticeposition;
    lpos.w += dtau(playrposworldframe4, lpos, playrvelworldframe4, float4(0.0, 0.0, 0.0, 1.0));
    float4 lposrestframe = mul(Lplayer, lpos);
    Evf.position = lposrestframe.xyz;
    Bvf.position = lposrestframe.xyz;
    Evf.direction = normalize(float3(F[3][0], F[3][1], F[3][2]));
    Evf.dirScalar = log10(1.0 + length(float3(F[3][0], F[3][1], F[3][2])));
    Bvf.direction = normalize(float3(F[1][2], F[2][0], F[0][1]));
    Bvf.dirScalar = log10(1.0 + length(float3(F[1][2], F[2][0], F[0][1])));
    _EVectorFieldDataBuffer[bufferIndex] = Evf;
    _BVectorFieldDataBuffer[bufferIndex] = Bvf;
}

[numthreads(NUM_THREAD_X,1,1)]
void ParticleMain (uint3 id : SV_DispatchThreadID)
{
    int index = id.x;
    Particle p = _ParticleDataBuffer[index];
    //Electromagnetic Tensor Component for particles
    p.ParticlePositionWorld4.w += dtau(playrposworldframe4, p.ParticlePositionWorld4, playrvelworldframe4, p.ParticleVelocityWorld4);
    float4x4 F = GaugeField(p.ParticlePositionWorld4);
    float4x4 metrictensor = float4x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0);
    p.ParticleVelocityWorld4 += 0.01 * mul(F, mul(metrictensor, p.ParticleVelocityWorld4)) * dtau(playrposworldframe4, p.ParticlePositionWorld4, playrvelworldframe4, p.ParticleVelocityWorld4);
    p.ParticlePositionWorld4 += p.ParticleVelocityWorld4 * dtau(playrposworldframe4, p.ParticlePositionWorld4, playrvelworldframe4, p.ParticleVelocityWorld4);//position
    float4 positionrestframe = mul(Lplayer, p.ParticlePositionWorld4);
    p.position = positionrestframe.xyz;
    _ParticleDataBuffer[index] = p;
}            